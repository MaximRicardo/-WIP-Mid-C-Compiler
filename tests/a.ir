;--------------------------------------
;Pre-Optimizations
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    alloca i32* %x, u32 4, u32 4
    mov i32 %x.init, i32 5
    store i32 %x.init, i32* %x, u32 0
    alloca i32* %y, u32 4, u32 4
    mov i32 %y.init, i32 42
    store i32 %y.init, i32* %y, u32 0
    je i32 1, i32 0, if_false_0, if_true_0
if_true_0:
    load i32 %0, i32* %y, u32 0
    load i32 %1, i32* %x, u32 0
    div i32 %2, i32 %0, i32 %1
    store i32 %2, i32* %y, u32 0
    mov i32 %3, i32 %2
    store i32 1, i32* %x, u32 0
    mov i32 %4, i32 1
    jmp if_end_0
if_false_0:
    je i32 0, i32 0, if_false_1, if_true_1
if_true_1:
    load i32 %5, i32* %y, u32 0
    load i32 %6, i32* %x, u32 0
    sub i32 %7, i32 %5, i32 %6
    store i32 %7, i32* %y, u32 0
    mov i32 %8, i32 %7
    store i32 2, i32* %x, u32 0
    mov i32 %9, i32 2
    jmp if_end_1
if_false_1:
    store i32 10, i32* %y, u32 0
    mov i32 %10, i32 10
    store i32 5, i32* %x, u32 0
    mov i32 %11, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    load i32 %12, i32* %x, u32 0
    load i32 %13, i32* %y, u32 0
    add i32 %14, i32 %12, i32 %13
    ret i32 %14
}

;--------------------------------------
;Final IR
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    je i32 1, i32 0, if_false_0, if_true_0
if_true_0:
    mov i32 %__eax, i32 8
    mov i32 %__ebx, i32 1
    jmp if_end_0
if_false_0:
    je i32 0, i32 0, if_false_1, if_true_1
if_true_1:
    mov i32 %__eax, i32 37
    mov i32 %__ebx, i32 2
    jmp if_end_1
if_false_1:
    mov i32 %__eax, i32 10
    mov i32 %__ebx, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    add i32 %__ecx, i32 %__ebx, i32 %__eax
    ret i32 %__ecx
}


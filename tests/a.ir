define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    alloca i32* %__none, u32 4, u32 4
    mov i32 %__eax, i32 5
    store i32 %__eax, i32* %__esp(4), u32 0
    alloca i32* %__none, u32 4, u32 4
    mov i32 %__eax, i32 42
    store i32 %__eax, i32* %__esp(0), u32 0
    mul i32 %__eax, i32 2, i32 3
    add i32 %__ebx, i32 1, i32 %__eax
    add i32 %__eax, i32 %__ebx, i32 4
    div i32 %__ebx, i32 %__eax, i32 2
    je i32 0, i32 0, if_false_0, if_true_0
if_true_0:
    load i32 %__eax, i32* %__esp(0), u32 0
    load i32 %__ebx, i32* %__esp(4), u32 0
    div i32 %__ecx, i32 %__eax, i32 %__ebx
    store i32 %__ecx, i32* %__esp(0), u32 0
    mov i32 %__eax, i32 %__ecx
    store i32 1, i32* %__esp(4), u32 0
    mov i32 %__eax, i32 1
    jmp if_end_0
if_false_0:
    je i32 1, i32 0, if_false_1, if_true_1
if_true_1:
    load i32 %__eax, i32* %__esp(0), u32 0
    load i32 %__ebx, i32* %__esp(4), u32 0
    sub i32 %__ecx, i32 %__eax, i32 %__ebx
    store i32 %__ecx, i32* %__esp(0), u32 0
    mov i32 %__eax, i32 %__ecx
    store i32 2, i32* %__esp(4), u32 0
    mov i32 %__eax, i32 2
    jmp if_end_1
if_false_1:
    store i32 10, i32* %__esp(0), u32 0
    mov i32 %__eax, i32 10
    store i32 5, i32* %__esp(4), u32 0
    mov i32 %__eax, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    load i32 %__eax, i32* %__esp(0), u32 0
    load i32 %__ebx, i32* %__esp(4), u32 0
    add i32 %__ecx, i32 %__eax, i32 %__ebx
    ret i32 %__ecx
}


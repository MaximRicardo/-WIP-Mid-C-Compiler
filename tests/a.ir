define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    mov i32 %x.init, i32 5
    mov i32 %x, i32 %x.init
    mov i32 %y.init, i32 42
    mov i32 %y, i32 %y.init
    mov i32 %fill_up_regs_0.init, i32 0
    mov i32 %fill_up_regs_0, i32 %fill_up_regs_0.init
    mov i32 %fill_up_regs_1.init, i32 0
    mov i32 %fill_up_regs_1, i32 %fill_up_regs_1.init
    mov i32 %fill_up_regs_2.init, i32 0
    mov i32 %fill_up_regs_2, i32 %fill_up_regs_2.init
    mov i32 %fill_up_regs_3.init, i32 0
    mov i32 %fill_up_regs_3, i32 %fill_up_regs_3.init
    add i32 %0, i32 1, i32 2
    add i32 %1, i32 3, i32 4
    mul i32 %2, i32 %0, i32 %1
    add i32 %3, i32 4, i32 5
    mul i32 %4, i32 %2, i32 %3
    je i32 0, i32 0, if_false_0, if_true_0
    alloc_reg i32 %y.4
    alloc_reg i32 %x.4
    alloc_reg i32 %y.4
    alloc_reg i32 %x.4
if_true_0:
    mov i32 %5, i32 %y
    mov i32 %6, i32 %x
    div i32 %7, i32 %5, i32 %6
    mov i32 %y.4, i32 %7
    mov i32 %8, i32 %7
    mov i32 %x.4, i32 1
    mov i32 %9, i32 1
    jmp if_end_0
if_false_0:
    je i32 1, i32 0, if_false_1, if_true_1
if_true_1:
    mov i32 %10, i32 %y
    mov i32 %11, i32 %x
    sub i32 %12, i32 %10, i32 %11
    mov i32 %y.4, i32 %12
    mov i32 %13, i32 %12
    mov i32 %x.4, i32 2
    mov i32 %14, i32 2
    jmp if_end_1
if_false_1:
    mov i32 %y.4, i32 10
    mov i32 %15, i32 10
    mov i32 %x.4, i32 5
    mov i32 %16, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    mov i32 %17, i32 %fill_up_regs_0
    add i32 %18, i32 %17, i32 0
    mov i32 %19, i32 %fill_up_regs_1
    add i32 %20, i32 %19, i32 0
    mov i32 %21, i32 %fill_up_regs_2
    add i32 %22, i32 %21, i32 0
    mov i32 %23, i32 %fill_up_regs_3
    add i32 %24, i32 %23, i32 0
    mov i32 %25, i32 %y.4
    mov i32 %26, i32 %x.4
    add i32 %27, i32 %25, i32 %26
    ret i32 %27
}

define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    mov i32 %__eax, i32 5
    mov i32 %__ebx, i32 %__eax
    mov i32 %__eax, i32 42
    mov i32 %__ecx, i32 %__eax
    mov i32 %__eax, i32 0
    mov i32 %__edx, i32 %__eax
    mov i32 %__eax, i32 0
    mov i32 %__ebp, i32 %__eax
    mov i32 %__eax, i32 0
    mov i32 %__esi, i32 %__eax
    mov i32 %__eax, i32 0
    mov i32 %__edi, i32 %__eax
    add i32 %__eax, i32 1, i32 2
    add i32 %__esp(0), i32 3, i32 4
    mul i32 %__esp(4), i32 %__eax, i32 %__esp(0)
    add i32 %__eax, i32 4, i32 5
    mul i32 %__esp(0), i32 %__esp(4), i32 %__eax
    je i32 0, i32 0, if_false_0, if_true_0
if_true_0:
    mov i32 %__esp(4), i32 %__ecx
    mov i32 %__esp(8), i32 %__ebx
    div i32 %__esp(12), i32 %__esp(4), i32 %__esp(8)
    mov i32 %__eax, i32 %__esp(12)
    mov i32 %__esp(4), i32 %__esp(12)
    mov i32 %__esp(0), i32 1
    mov i32 %__esp(4), i32 1
    jmp if_end_0
if_false_0:
    je i32 1, i32 0, if_false_1, if_true_1
if_true_1:
    mov i32 %__esp(4), i32 %__ecx
    mov i32 %__ecx, i32 %__ebx
    sub i32 %__ebx, i32 %__esp(4), i32 %__ecx
    mov i32 %__eax, i32 %__ebx
    mov i32 %__ecx, i32 %__ebx
    mov i32 %__esp(0), i32 2
    mov i32 %__ebx, i32 2
    jmp if_end_1
if_false_1:
    mov i32 %__eax, i32 10
    mov i32 %__ebx, i32 10
    mov i32 %__esp(0), i32 5
    mov i32 %__ebx, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    mov i32 %__ebx, i32 %__edx
    add i32 %__ecx, i32 %__ebx, i32 0
    mov i32 %__ebx, i32 %__ebp
    add i32 %__ecx, i32 %__ebx, i32 0
    mov i32 %__ebx, i32 %__esi
    add i32 %__ecx, i32 %__ebx, i32 0
    mov i32 %__ebx, i32 %__edi
    add i32 %__ecx, i32 %__ebx, i32 0
    mov i32 %__ebx, i32 %__eax
    mov i32 %__eax, i32 %__esp(0)
    add i32 %__ecx, i32 %__ebx, i32 %__eax
    ret i32 %__ecx
    alloca u0* %__none, u32 4, u32 4
    alloca u0* %__none, u32 4, u32 4
    alloca u0* %__none, u32 4, u32 4
    alloca u0* %__none, u32 4, u32 4
}


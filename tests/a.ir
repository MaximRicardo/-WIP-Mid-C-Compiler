;--------------------------------------
;Pre-Optimizations
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    alloca i32* %x.nr0, u32 4, u32 4
    mov i32 %x.nr0.init, i32 10
    store i32 %x.nr0.init, i32* %x.nr0, u32 0
    jmp while_0
while_0:
    load i32 %0, i32* %x.nr0, u32 0
    sub i32 %1, i32 %0, i32 4
    je i32 %1, i32 0, while_end_0, while_body_0
while_body_0:
    load i32 %2, i32* %x.nr0, u32 0
    sub i32 %3, i32 %2, i32 1
    store i32 %3, i32* %x.nr0, u32 0
    mov i32 %4, i32 %3
    load i32 %5, i32* %x.nr0, u32 0
    sub i32 %6, i32 %5, i32 1
    store i32 %6, i32* %x.nr0, u32 0
    mov i32 %7, i32 %6
    jmp while_0
while_end_0:
    load i32 %8, i32* %x.nr0, u32 0
    ret i32 %8
}

;--------------------------------------
;Post-Optimizations IR
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    mov i32 %x.nr0.init, i32 10
    mov i32 %x.nr0, i32 %x.nr0.init
    jmp while_0
while_0:
    phi i32 %x.nr0.0, i32 %x.nr0.2, i32 %x.nr0
    mov i32 %0, i32 %x.nr0.0
    sub i32 %1, i32 %0, i32 4
    je i32 %1, i32 0, while_end_0, while_body_0
while_body_0:
    mov i32 %2, i32 %x.nr0.0
    sub i32 %3, i32 %2, i32 1
    mov i32 %x.nr0.1, i32 %3
    mov i32 %4, i32 %3
    mov i32 %5, i32 %x.nr0.1
    sub i32 %6, i32 %5, i32 1
    mov i32 %x.nr0.2, i32 %6
    mov i32 %7, i32 %6
    jmp while_0
while_end_0:
    mov i32 %8, i32 %x.nr0.2
    ret i32 %8
}

;--------------------------------------
;Final IR
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    mov i32 %__eax, i32 10
    mov i32 %__ebx, i32 %__eax
    jmp while_0
while_0:
    mov i32 %__eax, i32 %__ebx
    sub i32 %__ecx, i32 %__eax, i32 4
    je i32 %__ecx, i32 0, while_end_0, while_body_0
while_body_0:
    mov i32 %__eax, i32 %__ebx
    sub i32 %__ecx, i32 %__eax, i32 1
    mov i32 %__eax, i32 %__ecx
    mov i32 %__edx, i32 %__ecx
    mov i32 %__ecx, i32 %__eax
    sub i32 %__eax, i32 %__ecx, i32 1
    mov i32 %__ebx, i32 %__eax
    mov i32 %__ecx, i32 %__eax
    jmp while_0
while_end_0:
    mov i32 %__eax, i32 %__ebx
    ret i32 %__eax
}


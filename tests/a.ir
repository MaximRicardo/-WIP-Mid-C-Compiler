define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    mov i32 %__esp(52), i32 5
    mov i32 %__esp(48), i32 %__esp(52)
    mov i32 %__esp(44), i32 42
    mov i32 %__esp(40), i32 %__esp(44)
    mov i32 %__esp(36), i32 0
    mov i32 %__esp(32), i32 %__esp(36)
    mov i32 %__esp(28), i32 0
    mov i32 %__esp(24), i32 %__esp(28)
    mov i32 %__esp(20), i32 0
    mov i32 %__esp(16), i32 %__esp(20)
    mov i32 %__esp(12), i32 0
    mov i32 %__esp(8), i32 %__esp(12)
    add i32 %__esp(4), i32 1, i32 2
    add i32 %__esp(0), i32 3, i32 4
    mul i32 %__eax, i32 %__esp(4), i32 %__esp(0)
    add i32 %__ebx, i32 4, i32 5
    mul i32 %__ecx, i32 %__eax, i32 %__ebx
    je i32 0, i32 0, if_false_0, if_true_0
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
    alloca u32* %__none, u32 4, u32 4
if_true_0:
    mov i32 %__ecx, i32 %__esp(40)
    mov i32 %__ecx, i32 %__esp(48)
    div i32 %__ecx, i32 %__ecx, i32 %__ecx
    mov i32 %__eax, i32 %__ecx
    mov i32 %__ecx, i32 %__ecx
    mov i32 %__ebx, i32 1
    mov i32 %__ecx, i32 1
    jmp if_end_0
if_false_0:
    je i32 1, i32 0, if_false_1, if_true_1
if_true_1:
    mov i32 %__ecx, i32 %__esp(40)
    mov i32 %__ecx, i32 %__esp(48)
    sub i32 %__ecx, i32 %__ecx, i32 %__ecx
    mov i32 %__eax, i32 %__ecx
    mov i32 %__ecx, i32 %__ecx
    mov i32 %__ebx, i32 2
    mov i32 %__ecx, i32 2
    jmp if_end_1
if_false_1:
    mov i32 %__eax, i32 10
    mov i32 %__eax, i32 10
    mov i32 %__ebx, i32 5
    mov i32 %__eax, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    mov i32 %__eax, i32 %__esp(32)
    add i32 %__eax, i32 %__eax, i32 0
    mov i32 %__eax, i32 %__esp(24)
    add i32 %__eax, i32 %__eax, i32 0
    mov i32 %__eax, i32 %__esp(16)
    add i32 %__eax, i32 %__eax, i32 0
    mov i32 %__eax, i32 %__esp(8)
    add i32 %__eax, i32 %__eax, i32 0
    mov i32 %__eax, i32 %__eax
    mov i32 %__eax, i32 %__ebx
    add i32 %__eax, i32 %__eax, i32 %__eax
    ret i32 %__eax
}


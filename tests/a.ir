;--------------------------------------
;Pre-Optimizations
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    alloca i32* %z.nr1, u32 4, u32 4
    alloca i32* %z.nr0, u32 4, u32 4
    alloca i32* %_6.nr0, u32 4, u32 4
    alloca i32* %_5.nr0, u32 4, u32 4
    alloca i32* %_4.nr0, u32 4, u32 4
    alloca i32* %_3.nr0, u32 4, u32 4
    alloca i32* %_2.nr0, u32 4, u32 4
    alloca i32* %_1.nr0, u32 4, u32 4
    alloca i32* %y.nr0, u32 4, u32 4
    alloca i32* %x.nr0, u32 4, u32 4
    mov i32 %x.nr0.init, i32 5
    store i32 %x.nr0.init, i32* %x.nr0, u32 0
    mov i32 %y.nr0.init, i32 42
    store i32 %y.nr0.init, i32* %y.nr0, u32 0
    mov i32 %_1.nr0.init, i32 10
    store i32 %_1.nr0.init, i32* %_1.nr0, u32 0
    mov i32 %_2.nr0.init, i32 10
    store i32 %_2.nr0.init, i32* %_2.nr0, u32 0
    mov i32 %_3.nr0.init, i32 10
    store i32 %_3.nr0.init, i32* %_3.nr0, u32 0
    mov i32 %_4.nr0.init, i32 10
    store i32 %_4.nr0.init, i32* %_4.nr0, u32 0
    mov i32 %_5.nr0.init, i32 10
    store i32 %_5.nr0.init, i32* %_5.nr0, u32 0
    mov i32 %_6.nr0.init, i32 10
    store i32 %_6.nr0.init, i32* %_6.nr0, u32 0
    je i32 1, i32 0, if_false_0, if_true_0
if_true_0:
    mov i32 %z.nr0.init, i32 5
    store i32 %z.nr0.init, i32* %z.nr0, u32 0
    load i32 %0, i32* %y.nr0, u32 0
    load i32 %1, i32* %x.nr0, u32 0
    div i32 %2, i32 %0, i32 %1
    store i32 %2, i32* %y.nr0, u32 0
    mov i32 %3, i32 %2
    load i32 %4, i32* %z.nr0, u32 0
    store i32 %4, i32* %x.nr0, u32 0
    mov i32 %5, i32 %4
    jmp if_end_0
if_false_0:
    je i32 0, i32 0, if_false_1, if_true_1
if_true_1:
    mov i32 %z.nr1.init, i32 5
    store i32 %z.nr1.init, i32* %z.nr1, u32 0
    load i32 %6, i32* %y.nr0, u32 0
    load i32 %7, i32* %x.nr0, u32 0
    sub i32 %8, i32 %6, i32 %7
    store i32 %8, i32* %y.nr0, u32 0
    mov i32 %9, i32 %8
    store i32 2, i32* %x.nr0, u32 0
    mov i32 %10, i32 2
    jmp if_end_1
if_false_1:
    store i32 10, i32* %y.nr0, u32 0
    mov i32 %11, i32 10
    store i32 5, i32* %x.nr0, u32 0
    mov i32 %12, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    load i32 %13, i32* %_1.nr0, u32 0
    add i32 %14, i32 %13, i32 10
    load i32 %15, i32* %_2.nr0, u32 0
    add i32 %16, i32 %15, i32 10
    load i32 %17, i32* %_3.nr0, u32 0
    add i32 %18, i32 %17, i32 10
    load i32 %19, i32* %_4.nr0, u32 0
    add i32 %20, i32 %19, i32 10
    load i32 %21, i32* %_5.nr0, u32 0
    add i32 %22, i32 %21, i32 10
    load i32 %23, i32* %_6.nr0, u32 0
    add i32 %24, i32 %23, i32 10
    load i32 %25, i32* %x.nr0, u32 0
    load i32 %26, i32* %y.nr0, u32 0
    add i32 %27, i32 %25, i32 %26
    ret i32 %27
}

;--------------------------------------
;Post-Optimizations IR
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    je i32 1, i32 0, if_false_0, if_true_0
if_true_0:
    mov i32 %y.nr0.0, i32 8
    mov i32 %x.nr0.0, i32 5
    jmp if_end_0
if_false_0:
    je i32 0, i32 0, if_false_1, if_true_1
if_true_1:
    mov i32 %y.nr0.1, i32 37
    mov i32 %x.nr0.1, i32 2
    jmp if_end_1
if_false_1:
    mov i32 %y.nr0.2, i32 10
    mov i32 %x.nr0.2, i32 5
    jmp if_end_1
if_end_1:
    phi i32 %x.nr0.3, i32 %x.nr0.1, i32 %x.nr0.2
    phi i32 %y.nr0.3, i32 %y.nr0.1, i32 %y.nr0.2
    jmp if_end_0
if_end_0:
    phi i32 %x.nr0.4, i32 %x.nr0.0, i32 %x.nr0.3
    phi i32 %y.nr0.4, i32 %y.nr0.0, i32 %y.nr0.3
    add i32 %27, i32 %x.nr0.4, i32 %y.nr0.4
    ret i32 %27
}

;--------------------------------------
;Final IR
;--------------------------------------
define i32 @main(i32 %arg.0, u32** %arg.1) {
start:
    je i32 1, i32 0, if_false_0, if_true_0
if_true_0:
    mov i32 %__ebx, i32 8
    mov i32 %__eax, i32 5
    jmp if_end_0
if_false_0:
    je i32 0, i32 0, if_false_1, if_true_1
if_true_1:
    mov i32 %__ebx, i32 37
    mov i32 %__eax, i32 2
    jmp if_end_1
if_false_1:
    mov i32 %__ebx, i32 10
    mov i32 %__eax, i32 5
    jmp if_end_1
if_end_1:
    jmp if_end_0
if_end_0:
    add i32 %__ecx, i32 %__eax, i32 %__ebx
    ret i32 %__ecx
}


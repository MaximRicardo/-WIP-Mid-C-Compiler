MCC/Mid C Compiler


    This is a work-in-progress C Compiler written entirely in C89 with no
non-standard or external libraries or macros.


TARGETS:


    This compiler outputs 32-bit x86 NASM Assembly, so compiled programs should
work on any x86 CPU after-and-including the Intel 80386. So basically, this'll
run on anything bruh.


DEPENDENCIES:


    The NASM Assembler is required to convert the outputted ASM code to an
executable.


LANGUAGE FEATURES:


    variables
    multiple types
        (char, short, int, long, all of their unsigned equivalents, and void)
    function definitions
    function calls
    function prototyping
    static functions
    return statements
    function argument error checking
    if/else statements
    pointers
    arrays
    while loops
    for loops
    typedefs
    type casts
    constant-folding
    #define macros
    signed/unsigned keywords
    structs


OPTIMIZATION FEATURES:


    constant-folding,                         Enabled by default
    placing variables in registers            Enabled with -O
    constant propagation                      Enabled with -O
    copy propagation                          Enabled with -O


BUILDING THE REPO:


    You need to have CMake installed, aswell as any C89 compiler. If you have
both just run `cmake .` in the project's main directory, and then run the
generated Makefile.

NOTE:

    While this *should* work on any system with a C89 compiler, I have only
tested this on Linux.


HOW TO USE:


    Run the command:

        mcc --help

    to get a menu showing all the available command line arguments.


STANDARD COMPLIANCE:


    I'm not planning on making the compiler completely compliant with any
C-standard, but the language will be extremely similar to C89. A list of
differences will be added once the compiler reaches a stable release.
